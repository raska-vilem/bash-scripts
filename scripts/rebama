#!/bin/bash

function echo_info() {
  echo "$(tput setaf 4)[INFO] $1$(tput sgr0)"
}

function echo_success() {
  echo "$(tput setaf 2)[SUCCESS] $1$(tput sgr0)"
}

function echo_error() {
  echo "$(tput setaf 1)[ERROR] $1$(tput sgr0)"
}

current_branch=$(git rev-parse --abbrev-ref HEAD)
echo_info "Current branch: $current_branch"

if git show-ref --verify --quiet refs/heads/master; then
  main_branch="master"
elif git show-ref --verify --quiet refs/heads/main; then
  main_branch="main"
else
  echo_error "Neither 'main' nor 'master' branch found"
  exit 1
fi

echo_info "Main branch detected as: $main_branch"

if [[ "$current_branch" == "$main_branch" ]]; then
  echo_error "Already on $main_branch branch. No need to rebase."
  exit 0
fi

if ! git diff-index --quiet HEAD --; then
  echo_info "Stashing changes..."
  stash_result=$(git stash push -m "Auto-stashed for rebase workflow")

  if [[ "$stash_result" == "No local changes to save" ]]; then
    has_stashed=false
    echo_info "No changes to stash"
  else
    has_stashed=true
    echo_info "Changes stashed successfully"
  fi
else
  has_stashed=false
  echo_info "No local changes detected"
fi

echo_info "Checking out $main_branch branch..."
if ! git checkout "$main_branch"; then
  echo_error "Failed to checkout $main_branch"
  exit 1
fi

echo_info "Pulling latest changes from $main_branch..."
if ! git pull origin "$main_branch"; then
  echo_error "Failed to pull from $main_branch"
  git checkout "$current_branch"
  if [[ "$has_stashed" == true ]]; then
    echo_info "Applying stashed changes..."
    git stash pop
  fi
  exit 1
fi

echo_info "Checking out original branch: $current_branch..."
if ! git checkout "$current_branch"; then
  echo_error "Failed to checkout $current_branch"
  exit 1
fi

echo_info "Rebasing $current_branch onto $main_branch..."
if ! git rebase "$main_branch"; then
  echo_error "Rebase conflict detected. Resolve conflicts and continue the rebase manually."
  echo_info "After resolving conflicts, run: git rebase --continue"
  echo_info "Then run: git push --force-with-lease origin $current_branch"

  if [[ "$has_stashed" == true ]]; then
    echo_info "Don't forget to apply your stashed changes after completing the rebase:"
    echo_info "git stash pop"
  fi
  exit 1
fi

echo_info "Force pushing changes to remote..."
if ! git push --force-with-lease origin "$current_branch"; then
  echo_error "Failed to push changes to remote"
  if [[ "$has_stashed" == true ]]; then
    echo_info "Applying stashed changes..."
    git stash pop
  fi
  exit 1
fi

if [[ "$has_stashed" == true ]]; then
  echo_info "Applying stashed changes..."
  if ! git stash pop; then
    echo_error "Failed to apply stashed changes due to conflicts."
    echo_info "Resolve conflicts manually and run: git stash drop when finished"
    exit 1
  fi
fi

echo_success "Complete! Your branch $current_branch is now rebased on $main_branch and pushed to remote."
